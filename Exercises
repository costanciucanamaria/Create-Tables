https://www.w3resource.com/sql-exercises/sql-joins-exercises.php

--1. From the following tables write a SQL query to find the salesperson and customer who reside in the same city. Return Salesman, cust_name and city.

SELECT 
s.name as Salesman, 
c.cust_name as Customer_Name, 
c.city as City
FROM salesman s 
JOIN customer c ON s.salesman_id = c.salesman_id
WHERE s.city = c.city

--2. From the following tables write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city.

SELECT 
o.ord_no, 
o.purch_amt, 
c.cust_name, 
c.city
FROM customer c 
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.purch_amt Between 500 and 2000

--3. From the following tables write a SQL query to find the salesperson(s) and the customer(s) he represents. Return Customer Name, city, Salesman, commission.

SELECT 
c.cust_name, 
c.city, 
s.name as Salesman, 
s.commission
FROM customer c 
JOIN salesman s ON c.salesman_id = s.salesman_id

--4. From the following tables write a SQL query to find salespeople who received commissions of more than 12 percent from the company. Return Customer Name, customer city, Salesman, commission.  

SELECT 
c.cust_name, 
c.city, 
s.name as Salesman, 
s.commission
FROM customer c 
JOIN salesman s ON c.salesman_id = s.salesman_id
WHERE s.commission > 0.12

--5. From the following tables write a SQL query to locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company. Return Customer Name, customer city, Salesman, salesman city, commission.  

SELECT 
c.cust_name, 
c.city as [customer city], 
s.name as Salesman, 
s.city as [salesman city],
s.commission
FROM customer c 
JOIN salesman s ON c.salesman_id = s.salesman_id
WHERE s.commission > 0.12
and c.city <> s.city

--6. From the following tables write a SQL query to find the details of an order. Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission. 

SELECT 
o.ord_no,
o.ord_date,
o.purch_amt,
c.cust_name as [customer name], 
c.grade, 
s.name as Salesman, 
s.commission
FROM customer c 
JOIN salesman s ON c.salesman_id = s.salesman_id
join orders o ON o.customer_id = c.customer_id

--7. Write a SQL statement to join the tables salesman, customer and orders so that the same column of each table appears once and only the relational rows are returned. 


SELECT 
c.customer_id,
c.cust_name as [customer name],
c.city as [customer city],
c.grade,
s.salesman_id, 
s.name as [salesman],
s.commission,
o.ord_no,
o.purch_amt, 
o.ord_date
FROM customer c 
JOIN salesman s ON c.salesman_id = s.salesman_id
join orders o ON o.customer_id = c.customer_id
WHERE c.salesman_id = o.salesman_id 
AND c.city = s.city

--8. From the following tables write a SQL query to display the customer name, customer city, grade, salesman, salesman city. The results should be sorted by ascending customer_id.  

SELECT 
c.cust_name as [customer name],
c.city as [customer city],
c.grade,
s.name as [salesman],
s.city as [salesman city]
FROM customer c 
JOIN salesman s ON c.salesman_id = s.salesman_id
ORDER BY c.customer_id Asc

--9. From the following tables write a SQL query to find those customers with a grade less than 300. Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending customer_id. 

SELECT 
c.cust_name,
c.city as [customer city],
c.grade,
s.name as [salesman],
s.city as [salesmancity]
FROM customer c 
JOIN salesman s ON c.salesman_id = s.salesman_id
WHERE c.grade < 300
ORDER BY c.customer_id Asc

--10. Write a SQL statement to make a report with customer name, city, order number, order date, and order amount in ascending order according to the order date to determine whether any of the existing customers have placed an order or not.

SELECT 
c.cust_name AS [customer name],
c.city,
o.ord_no as [order number], 
o.ord_date as [order date],
o.purch_amt as [order amount]
FROM customer c 
LEFT JOIN orders o ON c.customer_id = o.customer_id
ORDER BY o.ord_date Asc

--11. SQL statement to generate a report with customer name, city, order number, order date, order amount, salesperson name, and commission to determine if any of the existing customers have not placed orders or if they have placed orders through their salesman or by themselves.

SELECT 
c.cust_name as [customer name],
c.city,
o.ord_no as [order number], 
o.ord_date as [order date],
o.purch_amt as [order amount],
s.name as [salesperson name],
s.commission
FROM customer c 
left join orders o ON o.customer_id = c.customer_id
left JOIN salesman s ON c.salesman_id = s.salesman_id

--12. Write a SQL statement to generate a list in ascending order of salespersons who work either for one or more customers or have not yet joined any of the customers.

SELECT DISTINCT s.* 
FROM salesman s
LEFT JOIN customer c on s.salesman_id = c.salesman_id
ORDER BY s.salesman_id asc


--sample solution: 
SELECT a.cust_name,a.city,a.grade, 
b.name AS "Salesman", b.city 
FROM customer a 
RIGHT OUTER JOIN salesman b 
ON b.salesman_id=a.salesman_id 
ORDER BY b.salesman_id;

--13. From the following tables write a SQL query to list all salespersons along with customer name, city, grade, order number, date, and amount.

SELECT 
s.name as [salesperson],
c.cust_name as [customer name],
c.city,
c.grade,
o.ord_no as [order number], 
o.ord_date as [order date],
o.purch_amt as [order amount]
FROM customer c 
right join orders o ON o.customer_id = c.customer_id
right JOIN salesman s ON c.salesman_id = s.salesman_id

--14. Write a SQL statement to make a list for the salesmen who either work for one or more customers or yet to join any of the customer. The customer may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier.

SELECT 
s.name as [salesman],
c.cust_name as [customer name],
c.city,
c.grade,
o.ord_no as [order number], 
o.ord_date as [order date],
o.purch_amt as [order amount]
FROM customer c
RIGHT JOIN salesman s ON c.salesman_id = s.salesman_id
LEFT join orders o ON o.customer_id = c.customer_id
WHERE o.purch_amt >= 2000
AND c.grade IS NOT NULL


--is the output of the query good?
https://www.w3resource.com/sql-exercises/sql-joins-exercise-14.php

--15.For those customers from the existing list who put one or more orders, or which orders have been placed by the customer who is not on the list, create a report containing the customer name, city, order number, order date, and purchase amount

SELECT 
c.cust_name as [customer name],
c.city,
o.ord_no as [order number], 
o.ord_date as [order date],
o.purch_amt as [purchase amount]
FROM customer c
LEFT join orders o ON o.customer_id = c.customer_id

--16. Write a SQL statement to generate a report with the customer name, city, order no. order date, purchase amount for only those customers on the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who neither is on the list nor has a grade.

SELECT 
c.cust_name as [customer name],
c.city,
o.ord_no as [order number], 
o.ord_date as [order date],
o.purch_amt as [purchase amount]
FROM customer c
FULL join orders o ON o.customer_id = c.customer_id
WHERE c.grade IS NOT NULL

--17. Write a SQL query to combine each row of the salesman table with each row of the customer table.

SELECT 
*
FROM customer c 
cross JOIN salesman s 

--18. Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for all customers and vice versa for that salesperson who belongs to that city.

SELECT 
*
FROM customer c 
cross JOIN salesman s 
WHERE s.city is not null

--19. Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for every customer and vice versa for those salesmen who belong to a city and customers who require a grade.

SELECT 
*
FROM customer c 
cross JOIN salesman s 


WHERE s.city is not null
AND c.grade is not null

--20. Write a SQL statement to make a Cartesian product between salesman and customer i.e. each salesman will appear for all customers and vice versa for those salesmen who must belong to a city which is not the same as his customer and the customers should have their own grade.

SELECT 
*
FROM customer c 
cross JOIN salesman s 
WHERE s.city is not null
AND s.city <> c.city
AND c.grade is not null

--21. From the following tables write a SQL query to select all rows from both participating tables as long as there is a match between pro_com and com_id.

SELECT 
*
FROM company_mast cm
JOIN item_mast im ON cm.com_id = im.pro_com

--22. Write a SQL query to display the item name, price, and company name of all the products.

SELECT 
im.pro_name as [item name],
im.pro_price as price, 
cm.com_name as [company name]
FROM company_mast cm
JOIN item_mast im ON cm.com_id = im.pro_com

--23. From the following tables write a SQL query to calculate the average price of items of each company. Return average value and company name.


SELECT 
AVG(im.pro_price) as [average value],
cm.com_name as [company name]
FROM company_mast cm
JOIN item_mast im ON cm.com_id = im.pro_com
GROUP BY cm.com_name

--24. From the following tables write a SQL query to calculate and find the average price of items of each company higher than or equal to Rs. 350. Return average value and company name.

SELECT 
AVG(im.pro_price) as [average value],
cm.com_name as [company name]
FROM company_mast cm
JOIN item_mast im ON cm.com_id = im.pro_com
GROUP BY cm.com_name
HAVING AVG(im.pro_price) >= 350.00

--25. From the following tables write a SQL query to find the most expensive product of each company. Return pro_name, pro_price and com_name.

SELECT TOP 1 WITH TIES
im.pro_name,
im.pro_price,
cm.com_name
FROM company_mast cm
JOIN item_mast im ON cm.com_id = im.pro_com
ORDER BY ROW_NUMBER() OVER (PARTITION BY im.pro_com ORDER BY im.pro_price DESC);

sample solution: 
SELECT A.pro_name, A.pro_price, F.com_name
   FROM item_mast A INNER JOIN company_mast F
   ON A.pro_com = F.com_id
     AND A.pro_price =
     (
       SELECT MAX(A.pro_price)
         FROM item_mast A
         WHERE A.pro_com = F.com_id
     );

--26. From the following tables write a SQL query to display all the data of employees including their department.

SELECT * 
FROM emp_department edp
JOIN emp_details edt ON edp.dpt_code = edt.emp_dept

--27. From the following tables write a SQL query to display the first and last names of each employee, as well as the department name and sanction amount.

SELECT 
edt.emp_fname as [first name],
edt.emp_lname as [last name],
edp.dpt_name as [department name],
edp.dpt_allotment as [sanction amount]
FROM emp_department edp
JOIN emp_details edt ON edp.dpt_code = edt.emp_dept

--28. From the following tables write a SQL query to find the departments with budgets more than Rs. 50000 and display the first name and last name of employees.

SELECT 
edt.emp_fname as [first name],
edt.emp_lname as [last name]
FROM emp_department edp
JOIN emp_details edt ON edp.dpt_code = edt.emp_dept
WHERE edp.dpt_allotment > 50000 

--29. From the following tables write a SQL query to find the names of departments where more than two employees are employed. Return dpt_name.

SELECT 
edp.dpt_name as [department name]
FROM emp_department edp
JOIN emp_details edt ON edp.dpt_code = edt.emp_dept
GROUP BY  edp.dpt_name
HAVING COUNT (*) > 2

